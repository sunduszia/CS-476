// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyMentalHealth.Models;

#nullable disable

namespace MyMentalHealth.Migrations
{
    [DbContext(typeof(MymentalhealthContext))]
    [Migration("20221118011526_initialtemp")]
    partial class initialtemp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyMentalHealth.Models.Contents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HTMLContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IssueItemsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IssueItemsId");

                    b.ToTable("Contents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Contents");
                });

            modelBuilder.Entity("MyMentalHealth.Models.DailyCheckins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feeling")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DailyCheckins");
                });

            modelBuilder.Entity("MyMentalHealth.Models.IssueItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MentalHealthIssueId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("MentalHealthIssueId");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("IssueItems");
                });

            modelBuilder.Entity("MyMentalHealth.Models.MentalHealthIssues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("MentalHealthIssues");
                });

            modelBuilder.Entity("MyMentalHealth.Models.ResourceTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ResourceTypes");
                });

            modelBuilder.Entity("MyMentalHealth.Models.UserMentalHealthIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MentalHealthIssueId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentalHealthIssueId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMentalHealthIssues");
                });

            modelBuilder.Entity("MyMentalHealth.Models.UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("MyMentalHealth.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyMentalHealth.Models.Article", b =>
                {
                    b.HasBaseType("MyMentalHealth.Models.Contents");

                    b.HasDiscriminator().HasValue("Article");
                });

            modelBuilder.Entity("MyMentalHealth.Models.DefaultContent", b =>
                {
                    b.HasBaseType("MyMentalHealth.Models.Contents");

                    b.Property<string>("VideoLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("DefaultContent");
                });

            modelBuilder.Entity("MyMentalHealth.Models.Exercise", b =>
                {
                    b.HasBaseType("MyMentalHealth.Models.Contents");

                    b.Property<string>("VideoLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Exercise_VideoLink");

                    b.HasDiscriminator().HasValue("Exercise");
                });

            modelBuilder.Entity("MyMentalHealth.Models.Contents", b =>
                {
                    b.HasOne("MyMentalHealth.Models.IssueItems", "IssueItems")
                        .WithMany()
                        .HasForeignKey("IssueItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IssueItems");
                });

            modelBuilder.Entity("MyMentalHealth.Models.DailyCheckins", b =>
                {
                    b.HasOne("MyMentalHealth.Models.Users", null)
                        .WithMany("DailyCheckins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyMentalHealth.Models.IssueItems", b =>
                {
                    b.HasOne("MyMentalHealth.Models.MentalHealthIssues", null)
                        .WithMany("IssueItems")
                        .HasForeignKey("MentalHealthIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyMentalHealth.Models.ResourceTypes", null)
                        .WithMany("IssueItems")
                        .HasForeignKey("ResourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyMentalHealth.Models.UserMentalHealthIssue", b =>
                {
                    b.HasOne("MyMentalHealth.Models.MentalHealthIssues", null)
                        .WithMany("UserMentalHealthIssues")
                        .HasForeignKey("MentalHealthIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyMentalHealth.Models.Users", null)
                        .WithMany("UserMentalHealthIssues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyMentalHealth.Models.Users", b =>
                {
                    b.HasOne("MyMentalHealth.Models.UserRoles", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyMentalHealth.Models.MentalHealthIssues", b =>
                {
                    b.Navigation("IssueItems");

                    b.Navigation("UserMentalHealthIssues");
                });

            modelBuilder.Entity("MyMentalHealth.Models.ResourceTypes", b =>
                {
                    b.Navigation("IssueItems");
                });

            modelBuilder.Entity("MyMentalHealth.Models.UserRoles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MyMentalHealth.Models.Users", b =>
                {
                    b.Navigation("DailyCheckins");

                    b.Navigation("UserMentalHealthIssues");
                });
#pragma warning restore 612, 618
        }
    }
}
